--- ./include/onnxruntime/core/platform/ort_mutex.h.orig	2021-11-03 14:36:49.232322690 +0000
+++ ./include/onnxruntime/core/platform/ort_mutex.h	2021-11-03 15:10:49.894459603 +0000
@@ -102,13 +102,13 @@
 }
 }  // namespace onnxruntime
 #else
-#include "nsync.h"
+#include <pthread.h>
 #include <mutex>               //for unique_lock
 #include <condition_variable>  //for cv_status
 namespace onnxruntime {
 
 class OrtMutex {
-  nsync::nsync_mu data_ = NSYNC_MU_INIT;
+ pthread_mutex_t data_ = PTHREAD_MUTEX_INITIALIZER;
 
  public:
   constexpr OrtMutex() = default;
@@ -116,16 +116,16 @@
   OrtMutex(const OrtMutex&) = delete;
   OrtMutex& operator=(const OrtMutex&) = delete;
 
-  void lock() { nsync::nsync_mu_lock(&data_); }
-  bool try_lock() noexcept { return nsync::nsync_mu_trylock(&data_) == 0; }
-  void unlock() noexcept { nsync::nsync_mu_unlock(&data_); }
+  void lock() { pthread_mutex_lock(&data_); }
+  bool try_lock() noexcept { return pthread_mutex_lock(&data_) == 0; }
+  void unlock() noexcept { pthread_mutex_unlock(&data_); }
 
-  using native_handle_type = nsync::nsync_mu*;
+  using native_handle_type = pthread_mutex_t*;
   native_handle_type native_handle() { return &data_; }
 };
 
 class OrtCondVar {
-  nsync::nsync_cv native_cv_object = NSYNC_CV_INIT;
+ pthread_cond_t native_cv_object = PTHREAD_COND_INITIALIZER;
 
  public:
   constexpr OrtCondVar() noexcept = default;
@@ -134,8 +134,8 @@
   OrtCondVar(const OrtCondVar&) = delete;
   OrtCondVar& operator=(const OrtCondVar&) = delete;
 
-  void notify_one() noexcept { nsync::nsync_cv_signal(&native_cv_object); }
-  void notify_all() noexcept { nsync::nsync_cv_broadcast(&native_cv_object); }
+  void notify_one() noexcept { pthread_cond_signal(&native_cv_object); }
+  void notify_all() noexcept { pthread_cond_broadcast(&native_cv_object); }
 
   void wait(std::unique_lock<OrtMutex>& lk);
   template <class _Predicate>
@@ -151,7 +151,7 @@
    */
   template <class Rep, class Period>
   std::cv_status wait_for(std::unique_lock<OrtMutex>& cond_mutex, const std::chrono::duration<Rep, Period>& rel_time);
-  using native_handle_type = nsync::nsync_cv*;
+  using native_handle_type = pthread_cond_t*;
   native_handle_type native_handle() { return &native_cv_object; }
 
  private:
--- ./onnxruntime/core/platform/posix/ort_mutex.cc.orig	2021-11-03 15:57:07.221256487 +0000
+++ ./onnxruntime/core/platform/posix/ort_mutex.cc	2021-11-03 15:58:16.877274741 +0000
@@ -28,7 +28,7 @@
     abs_deadline.tv_sec = ts_sec_max;
     abs_deadline.tv_nsec = 999999999;
   }
-  nsync::nsync_cv_wait_with_deadline(&native_cv_object, lk.mutex()->native_handle(), abs_deadline, nullptr);
+  pthread_cond_timedwait(&native_cv_object, lk.mutex()->native_handle(), &abs_deadline);
 }
 
 void OrtCondVar::wait(std::unique_lock<OrtMutex>& lk) {
@@ -37,7 +37,7 @@
     ORT_THROW("OrtCondVar wait failed: mutex not locked");
   }
 #endif
-  nsync::nsync_cv_wait(&native_cv_object, lk.mutex()->native_handle());
+  pthread_cond_wait(&native_cv_object, lk.mutex()->native_handle());
 }
 
-}  // namespace onnxruntime
\ No newline at end of file
+}  // namespace onnxruntime
