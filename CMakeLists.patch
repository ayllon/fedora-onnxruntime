--- cmake/CMakeLists.txt
+++ cmake/CMakeLists.txt
@@ -23,6 +23,7 @@ set (CMAKE_C_STANDARD 99)
 include(CheckCXXCompilerFlag)
 include(CheckLanguage)
 include(CMakeDependentOption)
+include(GNUInstallDirs)
 
 set(CMAKE_CXX_STANDARD 17)

--- cmake/CMakeLists.txt	2021-10-21 08:55:05.917554501 +0000
+++ cmake/CMakeLists.txt	2021-11-03 20:56:10.051337339 +0000
@@ -833,7 +833,9 @@
 get_filename_component(REPO_ROOT "${REPO_ROOT}" ABSOLUTE)
 set(ONNXRUNTIME_INCLUDE_DIR ${REPO_ROOT}/include/onnxruntime)
 
-add_subdirectory(external/date EXCLUDE_FROM_ALL)
+#add_subdirectory(external/date EXCLUDE_FROM_ALL)
+find_package(date REQUIRED)
+add_library(date_interface ALIAS date::date)
 
 set(SAFEINT_INCLUDE_DIR ${REPO_ROOT}/cmake/external/SafeInt)
 add_library(safeint_interface INTERFACE)
@@ -844,20 +846,33 @@
   add_compile_definitions(optional_CONFIG_NO_EXCEPTIONS=1)
 endif()
 
-add_subdirectory(external/mp11 EXCLUDE_FROM_ALL)
+#add_subdirectory(external/mp11 EXCLUDE_FROM_ALL)
+find_package(Boost 1.66 REQUIRED)
+add_library(boost_mp11 INTERFACE)
+add_library(Boost::mp11 ALIAS boost_mp11)
+target_include_directories(boost_mp11 INTERFACE ${Boost_INCLUDE_DIRS})
 
 set(JSON_BuildTests OFF CACHE INTERNAL "")
 set(JSON_Install OFF CACHE INTERNAL "")
-add_subdirectory(external/json EXCLUDE_FROM_ALL)
+#add_subdirectory(external/json EXCLUDE_FROM_ALL)
+find_package(nlohmann_json REQUIRED)
+include_directories(${nlohmann_json_INCLUDE_DIRS})
+
 
 if(onnxruntime_PREFER_SYSTEM_LIB)
-  find_package(re2)
-endif()
-if(NOT TARGET re2::re2)
-  add_subdirectory(external/re2 EXCLUDE_FROM_ALL)
-  set_target_properties(re2 PROPERTIES FOLDER "External/re2")
-  set(RE2_INCLUDE_DIR ${REPO_ROOT}/cmake/external/re2)
-endif()
+  #find_package(re2)
+  find_package(PkgConfig REQUIRED)
+  pkg_check_modules(RE2 REQUIRED re2)
+  add_library(re2 INTERFACE IMPORTED)
+  set_property(TARGET re2 PROPERTY INTERFACE_LINK_LIBRARIES ${RE2_LINK_LIBRARIES}) 
+  set_property(TARGET re2 PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${RE2_INCLUDE_DIRS})
+  add_library(re2::re2 ALIAS re2)
+endif()
+#if(NOT TARGET re2::re2)
+#  add_subdirectory(external/re2 EXCLUDE_FROM_ALL)
+#  set_target_properties(re2 PROPERTIES FOLDER "External/re2")
+#  set(RE2_INCLUDE_DIR ${REPO_ROOT}/cmake/external/re2)
+#endif()
 
 
 # Adding pytorch CPU info library
@@ -887,10 +902,13 @@
             set(CPUINFO_SUPPORTED FALSE)
         endif()     
     elseif(NOT ${onnxruntime_target_platform} MATCHES "^(i[3-6]86|AMD64|x86(_64)?|armv[5-8].*|aarch64|arm64)$")
-        message(WARNING
+	message(WARNING
         "Target processor architecture \"${onnxruntime_target_platform}\" is not supported in cpuinfo. "
         "cpuinfo not included.")
-        set(CPUINFO_SUPPORTED FALSE)    
+        set(CPUINFO_SUPPORTED FALSE)
+    else()
+	message(WARNING "cpuinfo disabled")
+	set(CPUINFO_SUPPORTED FALSE)
     endif()
 endif()
 
@@ -1414,7 +1432,9 @@
 set(FLATBUFFERS_BUILD_FLATHASH OFF CACHE BOOL "FLATBUFFERS_BUILD_FLATHASH" FORCE)
 set(FLATBUFFERS_BUILD_FLATLIB ON CACHE BOOL "FLATBUFFERS_BUILD_FLATLIB" FORCE)
 set_msvc_c_cpp_compiler_warning_level(4)
-add_subdirectory(external/flatbuffers EXCLUDE_FROM_ALL)
+#add_subdirectory(external/flatbuffers EXCLUDE_FROM_ALL)
+find_package(Flatbuffers REQUIRED)
+add_library(flatbuffers ALIAS flatbuffers::flatbuffers_shared)
 set_msvc_c_cpp_compiler_warning_level(3)
 list(APPEND onnxruntime_EXTERNAL_DEPENDENCIES flatbuffers)
 list(APPEND onnxruntime_EXTERNAL_LIBRARIES flatbuffers)
@@ -1788,7 +1808,7 @@
   list(APPEND onnxruntime_EXTERNAL_LIBRARIES ${SYS_PATH_LIB} Shlwapi)
   list(APPEND onnxruntime_EXTERNAL_LIBRARIES debug Dbghelp)
 else()
-  list(APPEND onnxruntime_EXTERNAL_LIBRARIES nsync_cpp)
+#  list(APPEND onnxruntime_EXTERNAL_LIBRARIES nsync_cpp)
   list(APPEND onnxruntime_EXTERNAL_LIBRARIES ${CMAKE_DL_LIBS} Threads::Threads)
 endif()
 
--- cmake/onnxruntime_common.cmake.orig	2021-11-03 20:54:22.841359906 +0000
+++ cmake/onnxruntime_common.cmake	2021-11-03 20:54:54.814353178 +0000
@@ -213,7 +213,7 @@
     # Its functionality in detecting x86 cpu features are lacking, so is support for Windows.
 
     target_include_directories(onnxruntime_common PRIVATE ${PYTORCH_CPUINFO_INCLUDE_DIR})
-    target_link_libraries(onnxruntime_common cpuinfo)
-    list(APPEND onnxruntime_EXTERNAL_LIBRARIES cpuinfo clog)
+    #target_link_libraries(onnxruntime_common cpuinfo)
+    #list(APPEND onnxruntime_EXTERNAL_LIBRARIES cpuinfo clog)
   endif()
 endif()
